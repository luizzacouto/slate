# Usuários

## <img src="/images/get.png"> Listar alunos ou colaboradores

View list of all students or collaborators. This list is paginated and filtered if needed.

### HTTP Request

`GET /students or /collaborators`

```ruby
EXEMPLO DE CHAMADA UTILIZANDO RUBY
```

```python
EXEMPLO DE CHAMADA UTILIZADO PHYTON
```

```javascript
EXEMPLO DE CHAMADA UTILIZANDO JS
```

> The above command returns JSON structured like this:

```json
[
  EXEMPLO DE JSON
]
```

### Parâmetros opcionais

Nome | Tipo | Descrição
--------- | ------- | -----------
school_product_id | Array<Integer> | Student filter. Filter by school_product_id. Only users that have relations with some object with the id passed in the school_product_id will be in the list.
course_class_id | Array<Integer> | Student filter. Filter by course_class_id. Only users that have relations with some object with the id passed in the course_class_id will be in the list.
uninitiated_lesson_id | Array<Integer> | Student filter. Filter by uninitiated_leson_id. Only users that have relations with some object with the id passed in the uninitiated_leson_id will be in the list.
course_id | Array<Integer> | Student filter. Filter by course_id. Only users that have relations with some object with the id passed in the course_id will be in the list.
enrollment_status | Array<String> | Student filter. Filter by enrollmen_status. The available statuses are pending, active, expired, deactivated and canceled.
status  | Array<String> | Student filter. Filter by status
progress | Float | Student filter. Filter by progress. If used together with school_product_idòr it will return only students that have that progress in the products selected. *Important*: when this filter is used theprogress>=andprogress<=` will be ignored!
progress>= | Float | Student filter. Filter students that have progress equal or greater than the progress given. If used together with school_product_id it will return only students that have that progress in the products selected. This filter can be used together with progress<=.
progress<= | Float | Student filter. Filter students that have progress equal or less than the progress given. If used together with school_product_id it will return only students that have that progress in the products selected. This filter can be used together with progress<=.
completed_progress_at>= | DateTime | Student filter. Filter students that have completed the progress at the given DateTime or after that. If used together with school_product_id it will filter by students that completed the progress in those courses.
completed_progress_at<= | DateTime | Student filter. Filter students that have completed the progress at the given DateTime or before that. If used together with school_product_id it will filter by students that completed the progress in those courses.
enrolled_at>= | DateTime | Student filter. Filter students that have activated an enrollment at the given DateTime or after that. If used together with school_product_id it will filter by students that activated an enrollment in those courses.
enrolled_at<= | DateTime | Student filter. Filter students that have activated an enrollment at the given DateTime or before that. If used together with school_product_id it will filter by students that activated an enrollment in those courses.
last_progress_updated_at>=  | DateTime | Student filter. Filter students that have did some progress at the given DateTime or after that. ps: Some school's actions does not generate progress. If used together with school_product_id it will filter by students that have progresses in those courses.
last_progress_updated_at<=  | DateTime | Student filter. Filter students that have did some progress at the given DateTime or before that. ps: Some school's actions does not generate progress. If used together with school_product_id it will filter by students that have progresses in those courses.
ids | String | Filter by id. Return the users with the passed ids.
full_name | String | Filter by full_name. This is an espcial filter, with it you can pass any group of chars, the filter will select the users that the fullname or the email includes those chars.
sort  | String |Filter to sort the users by an attribute
direction | String |Filter to indicate the sort direction. It can be asc ou desc

## <img src="/images/post.png"> Criar alunos ou colaboradores

Create student or collaborator

### HTTP Request

`POST /students/ or /collaborators/`

```ruby
EXEMPLO DE CHAMADA UTILIZANDO RUBY
```

```python
EXEMPLO DE CHAMADA UTILIZADO PHYTON
```

```javascript
EXEMPLO DE CHAMADA UTILIZANDO JS
```

> The above command returns JSON structured like this:

```json
[
  EXEMPLO DE JSON
]
```

### Parâmetros obrigatórios

Nome | Tipo | Descrição
--------- | ------- | -----------
user | Hash | The user to create
user[first_name] | String | User first name
user[email] | String | User email that should be uniq
user[password] | String | Should be greater than 6 chars
user[password_confirmation] | String | Should be equal the password


### Parâmetros opcionais

Nome | Tipo | Descrição
--------- | ------- | -----------
user[last_name] | String | User last name
user[username]  | String | Nickname
user[cpf] | String | CPF
user[rg]  | String | RG
user[phone] | String
user[extra_phone] | String
user[skype] | String
user[twitter] | String
user[facebook]  | String
user[company_name]  | String
user[company_position]  | String
user[born_at] | DateTime
user[biography] | String
user[cover_image_url] | String
user[created_at] | DateTime | Exists only for Student. It overwrites the default created_at, normally used to migrate old students.
user[last_sign_in_at] | DateTime | Exists only for Student
user[role_ids]  | Array<Integer> | Roles to associate to the User
user[address_attributes] | Hash
user[address_attributes][id] | Integer |If not present it will create a new address
user[address_attributes][street]  | String | It will update the attribute if the user[address_attributes][id] is present
user[address_attributes][number] | Integer | It will update the attribute if the user[address_attributes][id] is present
user[address_attributes][complement]  | String | It will update the attribute if the user[address_attributes][id] is present
user[address_attributes][city]  | String | It will update the attribute if the user[address_attributes][id] is present
user[address_attributes][state] | String | It will update the attribute if the user[address_attributes][id] is present
user[address_attributes][zip_code]  | String | It will update the attribute if the user[address_attributes][id] is present
user[address_attributes][district]  | String | It will update the attribute if the user[address_attributes][id] is present

## <img src="/images/post.png"> Atualizar um aluno ou colaborador

Update student or collaborator

### HTTP Request

`PUT /students/:id or /collaborators/:id`

```ruby
EXEMPLO DE CHAMADA UTILIZANDO RUBY
```

```python
EXEMPLO DE CHAMADA UTILIZADO PHYTON
```

```javascript
EXEMPLO DE CHAMADA UTILIZANDO JS
```

> The above command returns JSON structured like this:

```json
[
  EXEMPLO DE JSON
]
```

### Parâmetros obrigatórios

Nome | Tipo | Descrição
--------- | ------- | -----------
user | Hash | The user to create
user[first_name] | String | The identifier of the Registration object
user[email] | String | The identifier of the Registration object
user[password] | String | The identifier of the SchoolProduct object
user[password_confirmation] | String | Enrollment type, can be indeterminate, time or attempts

## <img src="/images/delete.png"> Excluir aluno ou colaborador

Destroy a student or collaborator

### HTTP Request

`DELETE /students/:id or /collaborators/:id
`

```ruby
EXEMPLO DE CHAMADA UTILIZANDO RUBY
```

```python
EXEMPLO DE CHAMADA UTILIZADO PHYTON
```

```javascript
EXEMPLO DE CHAMADA UTILIZANDO JS
```

> The above command returns JSON structured like this:

```json
[
  EXEMPLO DE JSON
]
```

### Parâmetros obrigatórios

Nome | Tipo | Descrição
--------- | ------- | -----------
id | Integer | Id of user